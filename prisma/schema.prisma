generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  username      String?   @unique
  bio           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalPosts Int? @default(0)
  totalReads Int? @default(0)

  accounts Account[]
  sessions Session[]

  socialLinks SocialLinks[]
  blogPosts   BlogPosts[]
  comments    Comments[]
  // notifications Notifications[] @relation("UserNotifications")

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model SocialLinks {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  youtube   String? @default("")
  instagram String? @default("")
  facebook  String? @default("")
  twitter   String? @default("")
  github    String? @default("")
  website   String? @default("")

  userSocialLinkId String @db.ObjectId
  belongsToUser    User   @relation(fields: [userSocialLinkId], references: [id])
}

model BlogPosts {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  authorId String? @db.ObjectId

  title       String
  content     String
  bannerImage String
  description String   @default("")
  tags        String[]
  draft       Boolean  @default(false)
  slug        String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User? @relation(fields: [authorId], references: [id])

  activity       Activity[]
  comments       Comments[] @relation("BlogComments")
  commentsAuthor Comments[] @relation("BlogAuthorComments")
  // notifications  Notifications[] @relation("BlogNotifications")

  @@map("blog_posts")
}

model Activity {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  blogPostId String? @db.ObjectId

  totalLikes          Int @default(0)
  totalComments       Int @default(0)
  totalReads          Int @default(0)
  totalParentComments Int @default(0)

  blogPost BlogPosts? @relation(fields: [blogPostId], references: [id])

  @@map("activity")
}

model Comments {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  blogId       String    @db.ObjectId
  blog         BlogPosts @relation("BlogComments", fields: [blogId], references: [id])
  blogAuthorId String    @db.ObjectId
  blogAuthor   BlogPosts @relation("BlogAuthorComments", fields: [blogAuthorId], references: [id])

  comment String @default("")

  children Comments[] @relation("CommentChildren")

  commentedById String? @db.ObjectId
  commentedBy   User?   @relation(fields: [commentedById], references: [id])

  isReply Boolean?

  parentId String?   @db.ObjectId
  parent   Comments? @relation("CommentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  commentedAt DateTime @default(now())

  @@map("comments")
}

// enum NotificationType {
//   LIKE
//   COMMENT
//   REPLY
// }

// model Notifications {
//   id   String           @id @default(auto()) @map("_id") @db.ObjectId
//   type NotificationType
//   seen Boolean          @default(false)

//   blogId String    @db.ObjectId
//   blog   BlogPosts @relation("BlogNotifications", fields: [blogId], references: [id])

//   notificationForUserId String @db.ObjectId
//   notificationFor       User   @relation("UserNotifications", fields: [notificationForUserId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
